\section{Struttura del progetto}
Tutto il codice è contenuto nella cartella \texttt{src}, dove:
\begin{itemize}
	\item I file \texttt{commons.c} e \texttt{commons.h} contengono funzioni utili sia all'object store, che alla libreria del client;
	\item I file \texttt{server.c, worker.c, signal.c} e \texttt{commands.c}, con relativi header, contengono l'implementazione dell'Object Store;
	\item I file \texttt{libobjstore.c} e \texttt{libobjstore.h} contengono l'implementazione della liberia lato client;
\end{itemize}
Il \texttt{Makefile} contiene cinque target:
\begin{itemize}
	\item Il target \texttt{all} (di default) compila l'object store, la libreria client e il client di test;
	\item Il target \texttt{test} compila il client di test ed esegue dei test atti a verificare il corretto funzionamento dell'object store. L'esito dei test viene ridiretto nel file \texttt{testout.log};
	\item Il target \texttt{server} compila solo l'object store;
	\item Il target \texttt{libobjstore} compila la libreria client in formato statico, salvandola nella cartella \texttt{libs};
	\item Il target \texttt{clean} rimuove tutti i prodotti del processo di compilazione.
\end{itemize}

Infine, lo script \texttt{testsum.sh} elabora il file prodotto dai test, rendendolo più leggibile. Un esempio di tale processo è:
\begin{Verbatim}

\end

\section{Scelte implementative}

Per rispettare le richieste del progetto, si è deciso di usare una lista doppiamente
concatenata di strutture definite, nel file \texttt{src/worker.h} come
\begin{Verbatim}

struct worker_s {
	struct worker_s *next;
	pthread_t worker_thread;
	int worker_fd;
	int is_active;
	int is_registered;
	char associated_name[MAX_CLIENT_NAME_LEN + 1];
	struct worker_s *prev;
};

\end{verbatim}
